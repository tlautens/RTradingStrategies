data(GlobalTemp)
modelTemp<-SSModel(y=GlobalTemp, Z = matrix(1,nrow=2), T=1, R=1, H=matrix(NA,2,2),
Q=NA, a1=0, P1=0, P1inf=1)
fit<-fitSSM(inits=c(0.5*log(.1),0.5*log(.1),0.5*log(.1),0),model=modelTemp)
outTemp<-KFS(fit$model,smooth="both")
ts.plot(cbind(modelTemp$y,t(outTemp$alphahat)),col=1:3)
legend("bottomright",legend=c(colnames(GlobalTemp), "Smoothed signal"), col=1:3, lty=1)
# Example of multivariate series where first series follows stationary ARMA(1,1)
# process and second stationary AR(1) process.
y1<-arima.sim(model=list(ar=0.8,ma=0.3), n=100, sd=0.5)
model1<-arimaSSM(y=y1,arima=list(ar=0.8,ma=0.3),Q=0.5^2)
y2<-arima.sim(model=list(ar=-0.5), n=100)
model2<-arimaSSM(y=y2,arima=list(ar=-0.5))
model<-model1+model2
# Another way:
modelb<-arimaSSM(y=ts.union(y1,y2),arima=list(list(ar=0.8,ma=0.3),list(ar=-0.5)),Q=diag(c(0.5^2,1)))
f.out<-KFS(model)
model<-structSSM(y=log(Seatbelts[,"drivers"]),trend="level",seasonal="time",
X=cbind(log(Seatbelts[,"kms"]),log(Seatbelts[,"PetrolPrice"]),Seatbelts[,c("law")]))
fit<-fitSSM(inits=rep(-1,3),model=model)
out<-KFS(fit$model,smoothing="state")
plot(out,lty=1:2,col=1:2,main="Observations and smoothed signal with and without seasonal component")
lines(signal(out,states=c(1,13:15))$s,col=4,lty=1)
legend("bottomleft",legend=c("Observations", "Smoothed signal","Smoothed level"), col=c(1,2,4), lty=c(1,2,1))
# Multivariate model with constant seasonal pattern in frequency domain
model<-structSSM(y=log(Seatbelts[,c("front","rear")]),trend="level",seasonal="freq",
X=cbind(log(Seatbelts[,c("kms")]),log(Seatbelts[,"PetrolPrice"]),Seatbelts[,"law"]),
H=NA,Q.level=NA,Q.seasonal=0)
sbFit<-fitSSM(inits=rep(-1,6),model=model)
out<-KFS(sbFit$model,smoothing="state")
ts.plot(signal(out,states=c(1:2,25:30))$s,model$y,col=1:4)
# Poisson model
model<-structSSM(y=Seatbelts[,"VanKilled"],trend="level",seasonal="time",X=Seatbelts[,"law"],
distribution="Poisson")
# Estimate variance parameters
fit<-fitSSM(inits=rep(0.5*log(0.005),2), model=model)
model<-fit$model
# Approximating model, gives also the conditional mode of theta
amod<-approxSSM(model)
out.amod<-KFS(amod,smoothing="state")
# State smoothing via importance sampling
out<-KFS(model,nsim=1000)
# Observations with exp(smoothed signal) computed by
# importance sampling in KFS, and by approximating model
ts.plot(cbind(model$y,out$yhat,exp(amod$theta)),col=1:3) # Almost identical
# It is more interesting to look at the smoothed values of exp(level + intervention)
lev1<-exp(signal(out,states=c(1,13))$s)
lev2<-exp(signal(out.amod,states=c(1,13))$s)
# These are slightly biased as E[exp(x)] > exp(E[x]), better to use importance sampling:
vansample<-importanceSSM(model,save.model=FALSE,nsim=250)
# nsim is number of independent samples, as default two antithetic variables are used,
# so total number of samples is 1000.
w<-vansample$weights/sum(vansample$weights)
level<-colSums(t(exp(vansample$states[1,,]+model$Z[1,13,]*vansample$states[13,,]))*w)
ts.plot(cbind(model$y,lev1,lev2,level),col=1:4) #' Almost identical results
# Confidence intervals (no seasonal component)
varlevel<-colSums(t(exp(vansample$states[1,,]+model$Z[1,13,]*vansample$states[13,,])^2)*w)-level^2
intv<-level + qnorm(0.975)*varlevel%o%c(-1,1)
ts.plot(cbind(model$y,level,intv),col=c(1,2,3,3))
# Simulation error
# Mean estimation error of the single draw with 2 antithetics
level2<-t(exp(vansample$states[1,,1:250]+model$Z[1,13,]*vansample$states[13,,1:250])-level)*w[1:250]+
t(exp(vansample$states[1,,251:500]+model$Z[1,13,]*vansample$states[13,,251:500])-level)*w[251:500]+
t(exp(vansample$states[1,,501:750]+model$Z[1,13,]*vansample$states[13,,501:750])-level)*w[501:750]+
t(exp(vansample$states[1,,751:1000]+model$Z[1,13,]*vansample$states[13,,751:1000])-level)*w[751:1000]
varsim<-colSums(level2^2)
ts.plot(sqrt(varsim/varlevel)*100)
# Same without antithetic variables
vansamplenat<-importanceSSM(model,save.model=FALSE,nsim=1000,antithetics=FALSE)
w<-vansamplenat$weights/sum(vansamplenat$weights)
levelnat<-colSums(t(exp(vansamplenat$states[1,,]+
model$Z[1,13,]*vansamplenat$states[13,,]))*w)
varsimnat<-colSums((t(exp(vansamplenat$states[1,,]+
model$Z[1,13,]*vansamplenat$states[13,,])-levelnat)*w)^2)
varlevelnat<-colSums(t(exp(vansamplenat$states[1,,]+
model$Z[1,13,]*vansamplenat$states[13,,])^2)*w)-levelnat^2
ts.plot(sqrt(varsimnat/varlevelnat)*100)
ts.plot((sqrt(varsimnat)-sqrt(varsim))/sqrt(varsimnat)*100)
SSModel
regSSM
getSymbols("600000.SS")
head(600000.SS)
head("600000.SS")
head(`600000.SS`)
`600000.SS`
head("600000.SS")
head(`600000.SS`)
adjustOHLC(`600000.SS`)
head(`600000.SS`)
tail(`600000.SS`)
getSplits(`600000.SS`)
getSymbols("MSFT")
getSplits("MSFT")
getSplits
getEarnings(`600000.SS`)
install.packages("XML")
getEarnings(`600000.SS`)
install.packages("XML")
getEarnings(`600000.SS`)
getFinancials('JAVA')
getFinancials('JAVA')
getFin('AAPL')
detach("package:qmao")
library("qmao")
detach("package:qmao")
library("qmao")
getFin('AAPL')
ssm
SS
m1 <- SS( Fmat = function(tt, x, phi) {
Fmat      <- matrix(NA, nrow=3, ncol=1)
Fmat[1,1] <- 1
Fmat[2,1] <- cos(2*pi*tt/12)
Fmat[3,1] <- sin(2*pi*tt/12)
return(Fmat)
},
Gmat = function(tt, x, phi) {
matrix(c(1,0,0,0,1,0,0,0,1), nrow=3)
},
Wmat = matrix(c(0.01,0,0,0,0.1,0,0,0,0.1), nrow=3),
Vmat = matrix(1),
m0   = matrix(c(0,0,0), nrow=1),
C0   = matrix(c(1,0,0,0,0.001,0,0,0,0.001), nrow=3, ncol=3)
)
## Simulates 100 observation from m1
m1 <- recursion(m1, 100)
m1
W[1,2:3] <- 0
W[2:3,1] <- 0
W[2,2]   <- (W[2,2]+W[3,3])/2
W[3,3]   <- W[2,2]
W[2,3]   <- 0
W[3,2]   <- 0
W
m1 <- SS( Fmat = function(tt, x, phi) {
Fmat      <- matrix(NA, nrow=3, ncol=1)
Fmat[1,1] <- 1
Fmat[2,1] <- cos(2*pi*tt/12)
Fmat[3,1] <- sin(2*pi*tt/12)
return(Fmat)
},
Gmat = function(tt, x, phi) {
matrix(c(1,0,0,0,1,0,0,0,1), nrow=3)
},
Wmat = matrix(c(0.01,0,0,0,0.1,0,0,0,0.1), nrow=3),
Vmat = matrix(1),
m0   = matrix(c(0,0,0), nrow=1),
C0   = matrix(c(1,0,0,0,0.001,0,0,0,0.001), nrow=3, ncol=3)
)
## Simulates 100 observation from m1
m1 <- recursion(m1, 100)
m1
Wstruc <- function(W){
W[1,2:3] <- 0
W[2:3,1] <- 0
W[2,2]   <- (W[2,2]+W[3,3])/2
W[3,3]   <- W[2,2]
W[2,3]   <- 0
W[3,2]   <- 0
return(W)
}
## Estimstes variances and covariances of W by use of the EM algorithm
estimates <- EMalgo(m1, Wstruc=Wstruc)
estimates$ss$Wmat
estimates
names(estimates)
names(estimates$ss)
estimates
estimates$ss$Wmat
plot(estimates$ss)
class(estimates$ss)
plot.SS
data(mumps)
mumps
head(mumps)
class(mumps)
head(mumps)
times(mumps)
time(mumps)
index <- 1:length(mumps) # use 'index' instead of time
index
model <- ssm( mumps ~ -1 + tvar(polytime(index,1)),
family=poisson(link=log))
model
results <- getFit(model)
getFit
ssm$ss
results <- getFit(model)
plot(mumps,type='l',ylab='Number of Cases',xlab='',axes=FALSE)
lines( exp(results$m[,1]), lwd=2)
results2 <- extended(model$ss)
results3 <- kfs(model) ## yields the same
data(kurit)
m1 <- SS(kurit)
phi(m1) <- c(100,5)
m0(m1) <- matrix(130)
C0(m1) <- matrix(400)
m1.f <- kfilter(m1)
plot(m1$y)
lines(m1.f$m,lty=2)
m1 <- SS( Fmat = function(tt, x, phi) {
Fmat      <- matrix(NA, nrow=3, ncol=1)
Fmat[1,1] <- 1
Fmat[2,1] <- cos(2*pi*tt/12)
Fmat[3,1] <- sin(2*pi*tt/12)
return(Fmat)
},
Gmat = function(tt, x, phi) {
matrix(c(1,0,0,0,1,0,0,0,1), nrow=3)
},
Wmat = function(tt, x, phi) {
matrix(c(0.01,0,0,0,0.1,0,0,0,0.1), nrow=3)},
Vmat = function(tt, x, phi) {matrix(1)},
m0   = matrix(c(0,0,0), nrow=1),
C0   = matrix(c(1,0,0,0,0.001,0,0,0,0.001), nrow=3, ncol=3)
)
m1 <- recursion(m1, 100)
ssm1 <- ssm(m1$y ~ -1 + tvar(polytime(1:m1$n),1)
+ tvar(polytrig(1:m1$n, 1)),
family="gaussian", fit=FALSE)
smoothed <- Fkfs(ssm1$ss, tvar=c(m1$n, 1, 1, 1))
phi.start <- StructTS(log10(UKgas),type="BSM")$coef[c(4,1,2,3)]
gasmodel <- ssm( log10(UKgas) ~ -1+ tvar(polytime(time,1))+
tvar(sumseason(time,4)), phi=phi.start, fit=FALSE)
smoothed <- Fkfs(gasmodel$ss,tvar=c(1,1,1,1))
## Trend plot
## Trend plot
ts.plot( smoothed$kfas$alphahat[1,] )
## Season plot
ts.plot( smoothed$kfas$alphahat[3,] )
polytrig(1:10,degree=2)
season(1:12,period=4)
demo()
f <- array(c(.5,.3,.2,.4),c(2,2))
h <- array(c(1,0,0,1),c(2,2))
k <- array(c(.5,.3,.2,.4),c(2,2))
ss <- SS(F=f,G=NULL,H=h,K=k)
is.SS(ss)
ss
detach("package:dse")
library("dse")
f <- array(c(.5,.3,.2,.4),c(2,2))
h <- array(c(1,0,0,1),c(2,2))
k <- array(c(.5,.3,.2,.4),c(2,2))
ss <- SS(F=f,G=NULL,H=h,K=k)
is.SS(ss)
ss
ss <- SS(F=f,G=NULL,H=h,K=k)
ss
detach("package:stats")
detach("package:stats")
## see also JohnsonJohnson, Nile and AirPassengers
require(graphics)
trees <- window(treering, start=0)
(fit <- StructTS(trees, type = "level"))
plot(trees)
lines(fitted(fit), col = "green")
tsdiag(fit)
(fit <- StructTS(log10(UKgas), type = "BSM"))
par(mfrow = c(4, 1))
plot(log10(UKgas))
plot(cbind(fitted(fit), resids=resid(fit)), main = "UK gas consumption")
## keep some parameters fixed; trace optimizer:
StructTS(log10(UKgas), type = "BSM", fixed = c(0.1,0.001,NA,NA),
optim.control = list(trace=TRUE))
install.packages("cts")
install.packages("timsac")
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
W
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/kalman.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
testPackList$eachRun
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/myMA.R')
demo(macd)
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/myMA.R')
source('~/workspace/RTradingStrategies/dma_adx.R')
library("TSdbi")
library("tframe")
ts(rnorm(100), start=c(1982,1), frequency=12)
ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
z <- tframe(ts(rnorm(100), start=c(1982,1), frequency=12))
z
is.tframe(z)
matrix(rnorm(200), 100,2)
zz <- tframed(matrix(rnorm(200), 100,2), tf=z)
zz
is.tframed(zz)
zzz <- tframed(matrix(rnorm(200), 100,2), tf=zz)
zzz
as.tframe(start=c(1992,1), end=c(1996,3), frequency=4)
Tobs(as.tframe(start=c(1992,1), end=c(1996,3), frequency=4))
end(as.tframe(start=c(1992,1), end=c(1996,3), frequency=4))
z <- tframed(rnorm(100), start=c(1982,1), frequency=12)
z
z <- ts(rnorm(100), start=c(1982,1), frequency=12)
tfstart(z)
z <- tframed(matrix(rnorm(200), 100,2),
tf=list(start=c(1982,1), frequency=12))
z
tfend(z)
Tobs(z)
time(z)
tfprint(ts(rnorm(100)))
trimNA(ts(rbind(NA, matrix(1:20,10,2)), start=c(1980,1), frequency=12))
library("RTAQ")
data("sample_tdataraw")
sample_tdataraw
head(sample_tdataraw)
data("sample_qdataraw")
head(sample_qdataraw)
stock.str='AAPL' # what are we trying it on
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
getSymbols("AAPL")
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
install.packages("quantstrat")
getOrderBook('macd')
install.packages("quantstrat", repos="http://R-Forge.R-project.org"
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
library("quantstrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
getOrderBook('macd')
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
getOrderBook('macd')
plot(add_MACD(fast=fastMA, slow=slowMA, signal=signalMA,maType="EMA"))
chart.Posn(Portfolio=portfolio.st,Symbol=stock.str)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
?chart_Posn
?chart_Posn()
?chart_Posn
??chart_Posn
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
View(AAPL)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
View(DAX)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
getOrderBook('macd')
getOrderBook('macd')
source('~/Documents/R_Workspace/RTradingStrategies/macd.R')
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
demo('macd')
book  = getOrderBook(port)
demo('macd')
demo('macd')
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
rm(AAPL)
demo('macd')
View(obook)
demo('macd')
print(obook)
print(rets)
debugSource('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
getOrderBook('macd')
print(obook)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
obook <- getOrderBook('macd')
print(obook)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
print(obook)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
demo('macd')
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
plot(obookj)
plot(obook)
demo('macd')
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
plot(obook)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
plot(obook)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
getSymbols("GDAXI")
getSymbols("^GDAXI")
plot(GDAXI)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
^GDAXI <- GDAXI
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
plot(obook)
View(obook)
print(obook)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
?tradeStats
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
print(obook)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
print(obook)
source('~/.active-rstudio-document', echo=TRUE)
rm(obook)
print(book)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
stats = tradeStats('macd')
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
View(stats)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
View(stats2)
View(stats)
View(mktdata)
View(stats)
print(book)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
View(stats)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
View(stats)
install.packages(c("foreign", "manipulate", "nlme"))
View(stats)
print(data.frame(t(stats[,-c(1,2)])))
?tradeStats
dailyStats(macd, use = c("equity", "txns")
dailyStats(macd, use = c("equity", "txns"))
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/macd.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
print(data.frame(t(dailyStats[,-c(1,2)])))
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
print(data.frame(t(dailyStats[,-c(1,2)])))
print(book)
print(data.frame(t(dailyStats[,-c(1,2)])))
print(data.frame(t(stats[,-c(1,2)])))
source('~/.active-rstudio-document', echo=TRUE)
?PrtfReturns
?PortfReturns
?initAcct
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
View(rets)
chartSeries(rets)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=FALSE)
GDAXI2 <- read.csv("/Volumes/Cache2RAM/dax1m")
View(GDAXI2)
rownames(GDAXI2) = GDAXI2[[1]]
View(GDAXI2)
GDAXI3 <- as.xts(GDAXI2[,-1])
rm(GDAXI2)
View(GDAXI3)
print(rownames(GDAXI3) = 2015)
GDAX2015 <-GDAXI3[-1:(436745), ]
GDAX2015 <-GDAXI3[-(\1:436745), ]
GDAX2015 <-GDAXI3[-(1:436745), ]
chartSeries(GDAX2015)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=FALSE)
?applyStrategy
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=FALSE)
print(data.frame(t(stats[,-c(1,2)])))
print(book)
print(data.frame(t(rets[,-c(1,2)])))
print(rets)
plot(rets)
print(data.frame(t(stats[,-c(1,2)])))
source('~/Documents/R_Workspace/RTradingStrategies/tlautens_demo.R', echo=TRUE)
print(data.frame(t(stats[,-c(1,2)])))
View(rets)
?SAR
adx.sar <- SAR(GDAX2015)
View(adx.sar)
View(GDAX2015)
adx.sar <- SAR(GDAX2015,accel = c(0.02, 0.2))
View(adx.sar)
View(GDAX2015)
data(ttrc)
View(ttrc)
adx.sar <- SAR(GDAX2015[ ,c("GDAXI.High", "GDAXI.Low")])
View(adx.sar)
View(GDAX2015)
adx.sardax <- GDAX2015
adx.sardax[ , "sar"] <- adx.sar
adx.sardax <- rbind(adx.sardax,adx.sar)
adx.sardax <- cbind(adx.sardax,adx.sar)
View(adx.sardax)
chartSeries(GDAX2015)
addSAR()
